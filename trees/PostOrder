Solution1:
/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    private ArrayList<Integer> result;
    public ArrayList<Integer> postorderTraversal(TreeNode A) {
        result = new ArrayList<>();
        pot(A);
        return result;
    }
    private void pot(TreeNode root){
        if (root==null) return;
        pot(root.left);
        pot(root.right);
        result.add(root.val);
    }
}

Solution2:

/**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
	public ArrayList<Integer> postorderTraversal(TreeNode A) {
	    Stack<TreeNode> stack1, stack2;
	    ArrayList<Integer> postorder;
	    TreeNode node;
	    stack1 = new Stack<>();
	    stack2 = new Stack<>();
	    postorder = new ArrayList<>();
	    if (A == null)
	        return null;
	    stack1.push(A);
	    while (!stack1.isEmpty()) {
	        node = stack1.pop();
	        stack2.push(node);
	        if (node.left != null)
	            stack1.push(node.left);
	        if (node.right != null)
	            stack1.push(node.right);
	    }
	    while (!stack2.isEmpty()) {
	        node = stack2.pop();
	        postorder.add(node.val);
	    }
	    return postorder;
	}
}
