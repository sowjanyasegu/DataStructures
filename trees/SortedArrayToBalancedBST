Sorted Array To Balanced BST
------------------------------
Problem Description

Given an array where elements are sorted in ascending order, convert it to a height Balanced Binary Search Tree (BBST).

Balanced tree : a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.



Problem Constraints

1 <= length of array <= 100000



Input Format

First argument is an integer array A.



Output Format

Return a root node of the Binary Search Tree.



Example Input

Input 1:

 A : [1, 2, 3]
Input 2:

 A : [1, 2, 3, 5, 10]


Example Output

Output 1:

      2
    /   \
   1     3
Output 2:

      3
    /   \
   2     5
  /       \
 1         10
 
 Solution
 -----------------
 /**
 * Definition for binary tree
 * class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) {
 *      val = x;
 *      left=null;
 *      right=null;
 *     }
 * }
 */
public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public TreeNode sortedArrayToBST(final int[] A) {
        TreeNode root = constructBST(A,0,A.length-1);
        return root;
    }
    private TreeNode constructBST(int[] B, int l, int r){
        if(l>r) return null;
        int mid = (l+r)/2;
        TreeNode newNode = new TreeNode(B[mid]);
        newNode.left = constructBST(B,l,mid-1);
        newNode.right = constructBST(B,mid+1,r);
        return newNode;
    }
}
